// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190821082709_Notification")]
    partial class Notification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("API.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("date");

                    b.Property<int?>("postid");

                    b.Property<string>("text");

                    b.Property<int?>("userid");

                    b.HasKey("id");

                    b.HasIndex("postid");

                    b.HasIndex("userid");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("API.Models.Following", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("followedid");

                    b.Property<int?>("followerid");

                    b.Property<bool>("isAccept");

                    b.HasKey("id");

                    b.HasIndex("followedid");

                    b.HasIndex("followerid");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("API.Models.Like", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("postid");

                    b.Property<int?>("userid");

                    b.HasKey("id");

                    b.HasIndex("postid");

                    b.HasIndex("userid");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("API.Models.Notification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("postid");

                    b.Property<string>("text");

                    b.Property<int?>("userid");

                    b.HasKey("id");

                    b.HasIndex("postid");

                    b.HasIndex("userid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("API.Models.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("date");

                    b.Property<string>("post");

                    b.Property<int?>("userIdid");

                    b.HasKey("id");

                    b.HasIndex("userIdid");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("email");

                    b.Property<string>("firstName");

                    b.Property<string>("image");

                    b.Property<bool>("isOnline");

                    b.Property<bool>("isPublic");

                    b.Property<string>("lastName");

                    b.Property<string>("password");

                    b.Property<string>("token");

                    b.Property<string>("username");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.Comment", b =>
                {
                    b.HasOne("API.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("postid");

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");
                });

            modelBuilder.Entity("API.Models.Following", b =>
                {
                    b.HasOne("API.Models.User", "followed")
                        .WithMany()
                        .HasForeignKey("followedid");

                    b.HasOne("API.Models.User", "follower")
                        .WithMany()
                        .HasForeignKey("followerid");
                });

            modelBuilder.Entity("API.Models.Like", b =>
                {
                    b.HasOne("API.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("postid");

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");
                });

            modelBuilder.Entity("API.Models.Notification", b =>
                {
                    b.HasOne("API.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("postid");

                    b.HasOne("API.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");
                });

            modelBuilder.Entity("API.Models.Post", b =>
                {
                    b.HasOne("API.Models.User", "userId")
                        .WithMany()
                        .HasForeignKey("userIdid");
                });
#pragma warning restore 612, 618
        }
    }
}
